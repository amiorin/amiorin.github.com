<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I am alberto]]></title>
  <link href="http://albertomiorin.com/atom.xml" rel="self"/>
  <link href="http://albertomiorin.com/"/>
  <updated>2013-03-27T16:07:23+01:00</updated>
  <id>http://albertomiorin.com/</id>
  <author>
    <name><![CDATA[Alberto Miorin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Zen of Wiki with Gollum]]></title>
    <link href="http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum/"/>
    <updated>2013-03-25T13:47:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum</id>
    <content type="html"><![CDATA[<p>I&#8217;ve always loved wikis. They are very useful for bookmarks and snippets.
After many years of <a href="https://www.dokuwiki.org/dokuwiki">Dokuwiki</a>, I switched to <a href="https://evernote.com/">Evernote</a>. The Evernote
experience was very disappointing. But the Dokuwiki solution is based on
Lamp that is so old and I didn&#8217;t want to go back.</p>

<p>So I switched to <a href="https://github.com/gollum/gollum">Gollum</a> and now I&#8217;m very satified.</p>

<ul>
<li>I can use Vim to edit my wiki.</li>
<li>I can use Ack to search in my wiki.</li>
<li>I can edit it on Github, if I need to.</li>
</ul>


<h2>Setup</h2>

<p>Create a repository in Github (I use the repository of my blog). Click <code>wiki</code>
→ <code>Git Access</code>.  Clone the wiki and you are done.</p>

<h2>Edit</h2>

<p>If you want to edit your wiki in Chrome with Gollum, read this <a href="http://www.nomachetejuggling.com/2012/05/15/personal-wiki-using-github-and-gollum-on-os-x/">article</a>. If
you prefer to use Vim, I suggest you to install these plugins with <a href="https://github.com/gmarik/vundle">Vundle</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; open links in chrome</span>
</span><span class='line'>Bundle <span class="s1">&#39;tyru/open-browser.vim&#39;</span>
</span><span class='line'><span class="c">&quot; syntax highlight</span>
</span><span class='line'>Bundle <span class="s1">&#39;tpope/vim-markdown&#39;</span>
</span><span class='line'><span class="c">&quot; instant preview of markdown</span>
</span><span class='line'>Bundle <span class="s1">&#39;suan/vim-instant-markdown&#39;</span>
</span><span class='line'><span class="c">&quot; follow internal links of the wiki</span>
</span><span class='line'>Bundle <span class="s1">&#39;mmai/wikilink&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sync</h2>

<p>It&#8217;s very boring to do every time you modify your wiki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git pull
</span><span class='line'>git add -A
</span><span class='line'>git commit -m <span class="s2">&quot;minor changes&quot;</span>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>But if you use <a href="https://rvm.io/">Rvm</a>, you can create a <code>.rvmrc</code> in the root of your wiki:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># .rvmrc</span>
</span><span class='line'>git pull <span class="o">&amp;&amp;</span> git add -A <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&quot;minor changes&quot;</span> <span class="o">&amp;&amp;</span> git push
</span></code></pre></td></tr></table></div></figure>


<p>Every time you cd, Rvm looks for a file called .rvmrc. If it finds it, it
executes it. If you don&#8217;t use Rvm, you can use <a href="https://github.com/kennethreitz/autoenv">Autoenv</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># alias to sync when you are already in the root of the wiki.</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gsync</span><span class="o">=</span><span class="s2">&quot;sh ./.rvmrc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<ul>
<li>No database.</li>
<li>Password protected if you need.</li>
<li>Distribuited.</li>
<li>Autosync.</li>
<li>It works offline.</li>
<li>Vim editing instead of the <code>textarea</code>.</li>
<li>Regex search with Ack.</li>
<li>Instant preview in the browser.</li>
<li>Markdown language like in <a href="http://jekyllrb.com">Jekyll</a>.</li>
</ul>


<p>I&#8217;m ok for the next 10 years. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Pages in Vim]]></title>
    <link href="http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim/"/>
    <updated>2013-02-20T20:27:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim</id>
    <content type="html"><![CDATA[<p>This tip works only with MacVim (or GVim).</p>

<p>In Vim you can use one tab page per file, like in other editors, but I
think it doesn&#8217;t work very well. I prefer to use one tab page for every
project. I used to use a MacVim window for project, but the copy and paste was
a nightmare.</p>

<p><img src="http://albertomiorin.com/images/dotfiles.png" width="250">
<img src="http://albertomiorin.com/images/octopress.png" width="250">
<img src="http://albertomiorin.com/images/gollum.png" width="250"></p>

<p>The rule is simple. Every <strong>tab page</strong> is a <strong>project</strong> and it has a <strong>[local] working
directory</strong> that is displayed in the <code>guitablabel</code>.</p>

<h2>The code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; IMPORTANT! Inside your .gvimrc</span>
</span><span class='line'>augroup cwd
</span><span class='line'>  <span class="k">au</span><span class="p">!</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">CursorMoved</span><span class="p">,</span><span class="nb">WinEnter</span> * <span class="k">call</span> settabvar<span class="p">(</span>tabpagenr<span class="p">(),</span><span class="s1">&#39;cwd&#39;</span><span class="p">,</span> substitute<span class="p">(</span>getcwd<span class="p">(),</span> $HOME<span class="p">,</span> <span class="s1">&#39;~&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'>augroup END
</span><span class='line'><span class="k">set</span> <span class="nb">guitablabel</span><span class="p">=</span>%{gettabvar<span class="p">(</span><span class="k">v</span>:lnum<span class="p">,</span><span class="s1">&#39;cwd&#39;</span><span class="p">)</span>}
</span><span class='line'><span class="k">set</span> <span class="nb">showtabline</span><span class="p">=</span><span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Event DirEnter and DirLeave</h2>

<p>I would like to see in the next versions of Vim these two events. They would
be very useful to write new plugins <em>project-oriented</em>. In the meanwhile I&#8217;ve
downloaded the source code of Vim. After ten years, maybe I&#8217;ll try again to
write some C code again.</p>

<p>For more info <code>:h autocommand-events</code> and <code>:h tabpages</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerToys for Mac OS X]]></title>
    <link href="http://albertomiorin.com/blog/2013/01/15/powertoys-for-mac-os-x/"/>
    <updated>2013-01-15T01:48:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/01/15/powertoys-for-mac-os-x</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/clvv/fasd">Fasd</a></h3>

<p>Command-line productivity booster.</p>

<h3><a href="http://www.zsh.org/">Zsh</a></h3>

<p>Prompt with 2 lines.<br/>
Advanced completion <code>cp README.md ,octo&lt;Tab&gt;</code> ⇒ <code>cp README.md /Users/amiorin/Code/octopress</code>.</p>

<h3><a href="http://www.iterm2.com/">iTerm2</a></h3>

<p>256 colors and Solized.</p>

<h3><a href="https://code.google.com/p/macvim/">MacVim</a></h3>

<p>Best editor.</p>

<h3><a href="http://mizage.com/divvy/">Divvy</a></h3>

<p>Good window manager.</p>

<h3><a href="http://fluidapp.com/">Fluid</a></h3>

<p>Turn Your Favorite Web Apps into Real Mac Apps.<br/>
Cookie Storage for separeted from Safari ⇒ Multiple Gmail accounts without
problems.</p>

<h3><a href="http://www.dueapp.com/">Due</a></h3>

<p>Good reminder.</p>

<h3><a href="http://magicprefs.com/">MagicPrefs</a></h3>

<p>Better MacBook Trackpad.</p>

<h3><a href="http://evernote.com/skitch/">Skitch</a></h3>

<p>Annotated screenshots.</p>

<h3><a href="http://mxcl.github.com/homebrew/">Homebrew</a></h3>

<p>The missing package manager for OS X.</p>

<h3><a href="https://rvm.io/">Rvm</a></h3>

<p>RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.</p>

<h3><a href="http://git-scm.com/">Git</a></h3>

<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>

<h3><a href="http://pow.cx/">Pow</a></h3>

<p>Pow is a zero-config Rack server for Mac OS X.</p>

<h3><a href="https://github.com/burke/zeus">Zeus</a></h3>

<p>Boot any rails app in under a second.</p>

<h3><a href="http://rowanj.github.com/gitx/">GitX</a></h3>

<p>GitX-dev is a fork (variant) of GitX, a long-defunct GUI for the git version-control system. It has been maintained and enhanced with productivity and friendliness oriented changes, with effort focused on making a first-class, maintainable tool for today&#8217;s active developers.</p>

<h3><a href="http://totalfinder.binaryage.com/">TotalFinder</a></h3>

<p>Finder sucks.</p>

<h3><a href="http://www.sequelpro.com/">Sequel Pro</a></h3>

<p>Sequel Pro is a fast, easy-to-use Mac database management application for working with MySQL databases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoread and autowrite in Vim]]></title>
    <link href="http://albertomiorin.com/blog/2012/12/10/autoread-and-autowrite-in-vim/"/>
    <updated>2012-12-10T15:24:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2012/12/10/autoread-and-autowrite-in-vim</id>
    <content type="html"><![CDATA[<h2>What</h2>

<p>Don&#8217;t save or reload your buffers. Vim can do that for you.</p>

<h2>How</h2>

<p>From my <a href="https://github.com/amiorin/dotfiles/blob/master/vimrc">.vimrc</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; autoread and autowrite</span>
</span><span class='line'>augroup <span class="k">save</span>
</span><span class='line'>  <span class="k">au</span><span class="p">!</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FocusLost</span> * <span class="k">update</span>
</span><span class='line'>augroup END
</span><span class='line'><span class="k">set</span> <span class="nb">nohidden</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nobackup</span>
</span><span class='line'><span class="k">set</span> <span class="nb">noswapfile</span>
</span><span class='line'><span class="k">set</span> <span class="nb">nowritebackup</span>
</span><span class='line'><span class="k">set</span> <span class="nb">autoread</span>
</span><span class='line'><span class="k">set</span> <span class="nb">autowrite</span>
</span><span class='line'><span class="k">set</span> <span class="nb">autowriteall</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; persistent-undo</span>
</span><span class='line'><span class="k">set</span> <span class="nb">undodir</span><span class="p">=~</span><span class="sr">/.vim/</span>undo
</span><span class='line'><span class="k">set</span> <span class="nb">undofile</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why</h2>

<p><code>:w&lt;CR&gt;</code> and <code>&lt;D-s&gt;</code> take too much time. We should not be worried of data
loss, because we have Git and <code>:h persistent-undo</code>.</p>

<p>Additionaly how many times it&#8217;s happened to waste time in Chrome, reloading
the page n-times, because we had forgot to save in Vim?</p>

<p>Using <code>nohidden</code>, <code>autowrite</code> and <code>update</code> we are sure that everything
is saved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># don&#39;t forget to create the directory for the undo files</span>
</span><span class='line'>mkdir ~/.vim/undo
</span></code></pre></td></tr></table></div></figure>


<h2>You don&#8217;t need the scratch plugin</h2>

<p>You would like to try a VimL snippet, create a <code>scratch.vim</code> somewhere. Use
a global mark <code>mS</code> (S is scratch).</p>

<p>Now with <code>'S</code> you are in your scratch buffer.</p>

<p>Use <a href="https://github.com/amiorin/vim-eval">vim-eval</a> to evaluate (<code>&lt;C-c</code>) the file, the region or the line.</p>

<h2>Other global marks that I use</h2>

<ul>
<li><code>'V</code> my .vimrc</li>
<li><code>'T</code> my todos</li>
<li><code>'0</code> last file edited</li>
</ul>


<h2>But the undo is not user-friendly</h2>

<p>Yes, you&#8217;re right, try Losh&#8217;s <a href="https://github.com/sjl/gundo.vim">gundo</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Bundle <span class="s1">&#39;sjl/gundo.vim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command is <code>GundoToggle</code>.</p>
]]></content>
  </entry>
  
</feed>
