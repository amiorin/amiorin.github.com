<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | I am alberto]]></title>
  <link href="http://albertomiorin.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://albertomiorin.com/"/>
  <updated>2013-03-27T10:30:39+01:00</updated>
  <id>http://albertomiorin.com/</id>
  <author>
    <name><![CDATA[Alberto Miorin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Zen of Wiki with Gollum]]></title>
    <link href="http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum/"/>
    <updated>2013-03-25T13:47:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum</id>
    <content type="html"><![CDATA[<p>I've always loved wikis. They are very useful for bookmarks and snippets.
After many years of <a href="https://www.dokuwiki.org/dokuwiki">Dokuwiki</a>, I switched to <a href="https://evernote.com/">Evernote</a>. The Evernote
experience was very disappointing. But the Dokuwiki solution is based on
Lamp that is so old and I didn't want to go back.</p>

<p>So I switched to <a href="https://github.com/gollum/gollum">Gollum</a> and now I'm very satified.</p>

<ul>
<li>I can use Vim to edit my wiki.</li>
<li>I can use Ack to search in my wiki.</li>
<li>I can edit it on Github, if I need to.</li>
</ul>


<h2>Setup</h2>

<p>Create a repository in Github (I use the repository of my blog). Click <code>wiki</code>
â†’ <code>Git Access</code>.  Clone the wiki and you are done.</p>

<h2>Edit</h2>

<p>If you want to edit your wiki in Chrome with Gollum, read this <a href="http://www.nomachetejuggling.com/2012/05/15/personal-wiki-using-github-and-gollum-on-os-x/">article</a>. If
you prefer to use Vim, I suggest you to install these plugins with <a href="https://github.com/gmarik/vundle">Vundle</a>:</p>

<p><code>vim
" open links in chrome
Bundle 'tyru/open-browser.vim'
" syntax highlight
Bundle 'tpope/vim-markdown'
" instant preview of markdown
Bundle 'suan/vim-instant-markdown'
" follow internal links of the wiki
Bundle 'mmai/wikilink'
</code></p>

<h2>Sync</h2>

<p>It's very boring to do every time you modify your wiki:</p>

<p><code>sh
git pull
git add -A
git commit -m "minor changes"
git push
</code></p>

<p>But if you use <a href="https://rvm.io/">Rvm</a>, you can create a <code>.rvmrc</code> in the root of your wiki:</p>

<p>```sh</p>

<h1>.rvmrc</h1>

<p>git pull &amp;&amp; git add -A &amp;&amp; git commit -m "minor changes" &amp;&amp; git push
```</p>

<p>Every time you cd, Rvm looks for a file called .rvmrc. If it finds it, it
executes it. If you don't use Rvm, you can use <a href="https://github.com/kennethreitz/autoenv">Autoenv</a>.</p>

<p>```sh</p>

<h1>alias to sync when you are already in the root of the wiki.</h1>

<p>alias gsync="sh ./.rvmrc"
```</p>

<h2>Conclusion</h2>

<ul>
<li>No database.</li>
<li>Password protected if you need.</li>
<li>Distribuited.</li>
<li>Autosync.</li>
<li>It works offline.</li>
<li>Vim editing instead of the <code>textarea</code>.</li>
<li>Regex search with Ack.</li>
<li>Instant preview in the browser.</li>
<li>Markdown language like in <a href="http://jekyllrb.com">Jekyll</a>.</li>
</ul>


<p>I'm ok for the next 10 years. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Pages in Vim]]></title>
    <link href="http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim/"/>
    <updated>2013-02-20T20:27:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim</id>
    <content type="html"><![CDATA[<p>This tip works only with MacVim (or GVim).</p>

<p>In Vim you can use one tab page per file, like in other editors, but I
think it doesn't work very well. I prefer to use one tab page for every
project. I used to use a MacVim window for project, but the copy and paste was
a nightmare.</p>

<p><img src="/images/dotfiles.png" width="250">
<img src="/images/octopress.png" width="250">
<img src="/images/gollum.png" width="250"></p>

<p>The rule is simple. Every <strong>tab page</strong> is a <strong>project</strong> and it has a <strong>[local] working
directory</strong> that is displayed in the <code>guitablabel</code>.</p>

<h2>The code</h2>

<p><code>vim
" IMPORTANT! Inside your .gvimrc
augroup cwd
  au!
  au CursorMoved,WinEnter * call settabvar(tabpagenr(),'cwd', substitute(getcwd(), $HOME, '~', ''))
augroup END
set guitablabel=%{gettabvar(v:lnum,'cwd')}
set showtabline=1
</code></p>

<h2>Event DirEnter and DirLeave</h2>

<p>I would like to see in the next versions of Vim these two events. They would
be very useful to write new plugins <em>project-oriented</em>. In the meanwhile I've
downloaded the source code of Vim. After ten years, maybe I'll try again to
write some C code again.</p>

<p>For more info <code>:h autocommand-events</code> and <code>:h tabpages</code>.</p>
]]></content>
  </entry>
  
</feed>
