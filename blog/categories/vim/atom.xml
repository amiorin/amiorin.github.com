<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | I am alberto]]></title>
  <link href="http://albertomiorin.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://albertomiorin.com/"/>
  <updated>2013-05-21T07:24:04+02:00</updated>
  <id>http://albertomiorin.com/</id>
  <author>
    <name><![CDATA[Alberto Miorin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cross platform vim script development]]></title>
    <link href="http://albertomiorin.com/blog/2013/05/19/cross-platform-vim-script-development/"/>
    <updated>2013-05-19T10:01:00+02:00</updated>
    <id>http://albertomiorin.com/blog/2013/05/19/cross-platform-vim-script-development</id>
    <content type="html"><![CDATA[<p>I've developed <a href="https://github.com/amiorin/vim-project">vim-project</a> on my Mac and I wanted to be sure that it worked
on Windows too.
I bought a Windows 8 license some time ago for only 29,99 € to update my Acer
from Windows Vista.
I could try the plugin in my Acer, but I wanted to have something similar to a
<a href="http://www.vagrantup.com/">Vagrant</a> setup.
So I've created a VirtualBox for Windows 8, but I've encountered some obstacles.</p>

<h2>Uninstall windows 8</h2>

<p>You can have only one installation of Windows 8. So I followed the
instructions to uninstall the Windows 8 license from my Acer from <a href="http://www.howtogeek.com/124286/how-to-uninstall-your-windows-product-key-before-you-sell-your-pc/">How-To Geek</a></p>

<p>It wasn't enough. I had to call Microsoft to activate Window 8.</p>

<h2>Windows 8 upgrade with an empty disk</h2>

<p>If you install windows 8 on an empty partition, you cannot activate your
Windows 8. I have found how to fix the problem <a href="http://answers.microsoft.com/en-us/windows/forum/windows_8-windows_install/this-key-didnt-work-please-check-it-and-try-again/ba90b43b-682a-4633-9260-2d25c1f13903?page=2">in the Microsoft
forum</a></p>

<h2>Installation of Vim</h2>

<p>I've installed <a href="ftp://ftp.vim.org/pub/vim/pc/gvim73_46.exe">this version of
vim</a></p>

<h2>Setup of vundle in Windows</h2>

<p>I've followed the instructions from <a href="https://github.com/gmarik/vundle/wiki/Vundle-for-Windows">Vundle for Windows</a> to setup Git and
Curl.</p>

<h2>Shared Folder with VirtualBox</h2>

<p>This is the hard part. I wanted to be able to modify my plugin from MacVim and
then restart Gvim to test it.</p>

<p>To achive this, you need to configure a VirtualBox shared folder.
Then you need to setup a network unit in Windows. The problem is that the
network unit must be visible by all users, because the Symbolic links are
created as Administrator while vim is started as normal user.</p>

<p>I've found the solution on <a href="http://stackoverflow.com/a/4763324/2268638">stackoverflow</a>:</p>

<p>For this <strong>hack</strong> you will need <code>psexec</code> <a href="http://technet.microsoft.com/en-us/sysinternals/bb842062.aspx">SysinternalsSuite</a> by Mark Russinovich:</p>

<ol>
<li><p>Open an elevated cmd.exe prompt (Run as administrator). Press the <code>right
command</code>. Write <code>cmd</code> and then <code>&lt;C-S-CR&gt;</code> (<code>ctrl-shit-enter</code>).</p></li>
<li><p>Elevate again to root using PSExec.exe: Navigate to the folder containing
SysinternalsSuite and execute the following command <code>psexec -i -s
cmd.exe</code> you are now inside of a prompt that is <code>nt authority\system</code>
and you can prove this by typing <code>whoami</code>. The <code>-i</code> is needed because
drive mappings need to interact with the user</p></li>
<li><p>Create the persistent mapped drive as the SYSTEM account with the following
command <code>net use z:  \\VBOXSVR\gvim /persistent:yes</code></p></li>
</ol>


<p>Now you can create the links, but you have to do this <strong>hack</strong> everytime you
restart Windows.</p>

<h2>Creating symbolic links in NTFS</h2>

<p>My Gvim setup is in <code>/Users/amiorin/Code/gvim</code>, <code>gvim</code> from now on.
<code>gvim/_vimrc</code> is a link to <code>~/.vimrc</code>. <code>vimfiles</code> is not a link, but a
real directory, because I use <a href="https://github.com/gmarik/vundle">Vundle</a>.  But
<code>gvim/vimfiles/bundle/vim-project</code> is a link to
<code>~/.vim/bundle/vim-project</code>. <code>gvim</code> is <code>Z:</code> in Windows 8.</p>

<p>Using an elevated cmd.exe (<code>&lt;C-S-CR</code>)
```sh
cd %USERPROFILE%
mklink _vimrc z:_vimrc
mklink /D vimfiles z:\vimfiles</p>

<h1>Vundle uses .vim also on Windows.</h1>

<p>mklink /D .vim vimfiles
<code>
Inside Gvim
</code>vim
BundleInstall
<code>`
Then I removed my plugin from</code>vimfiles/bundle<code>and I have created a link
from</code>~/.vim/bundle/vim-project`` to be able to use the same code in MacVim
and Gvim.</p>

<h2>Powerline with Consolas font</h2>

<p>Here you find a patched <a href="http://codejury.com/consolas-font-in-vim-powerline-windows/">consolas for powerline</a>
<code>vim
set guifont=Consolas\ for\ Powerline\ FixedD:h12
</code></p>

<p><img src="https://pbs.twimg.com/media/BKm5QA6CMAASvSf.png:large" alt="gvim" /></p>

<h2>Conditional <code>.vimrc</code></h2>

<p>Some configurations are specific to one manchine. I've used the function
<code>hostname()</code> in this way.</p>

<p><code>vim
if hostname() ==# 'air.local'
  set guifont=Menlo\ for\ Powerline:h12
elseif hostname() ==# 'TOSHIBA'
  set guifont=Consolas\ for\ Powerline\ FixedD:h12
endif
</code></p>

<p><code>air.local</code> is the Mac and <code>TOSHIBA</code> is the Windows 8.</p>

<h2>Conclusion</h2>

<p>With this setup I can write my plugins in MacVim and test them on Gvim and
MacVim at the same time without any copy and paste of files or any commit and
pull. I could use Gvim, but I use a lot shortcuts starting with the <code>left
command</code> in MacVim and the <code>left command</code> is used by VirtualBox and it's a
dead key inside the guest os.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Vim plugin for editing fenced code blocks]]></title>
    <link href="http://albertomiorin.com/blog/2013/04/18/a-vim-plugin-for-editing-fenced-code-blocks/"/>
    <updated>2013-04-18T17:29:00+02:00</updated>
    <id>http://albertomiorin.com/blog/2013/04/18/a-vim-plugin-for-editing-fenced-code-blocks</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks">Fenced code blocks</a> are a very useful feature of GitHub Flavored Markdown.
With this plugin you can edit the fragment of code embedded inside the
markdown with the right filetype.</p>

<p><img src="https://raw.github.com/amiorin/vim-fenced-code-blocks/master/demo.gif" alt="Demo" /></p>

<h2>Install</h2>

<p>If you use <a href="https://github.com/gmarik/vundle.git">Vundle</a> you can install this plugin using Vim command <code>:BundleInstall amiorin/vim-fenced-code-blocks</code>.
Don't forget put a line <code>Bundle 'amiorin/vim-fenced-code-blocks'</code> in your <code>.vimrc</code>.</p>

<p>If you use <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>, you just execute following:</p>

<p><code>sh
cd ~/.vim/bundle
git clone https://github.com/amiorin/vim-fenced-code-blocks.git
</code></p>

<p>If you don't use either plugin management system, copy the <code>plugin</code> directory to your <code>.vim</code> directory.</p>

<p>*nix: $HOME/.vim
Windows: $HOME/vimfiles</p>

<h2>Use</h2>

<p>This plugin defines 4 new commands:</p>

<ul>
<li><code>:E</code> to edit in the same window, <code>CTRL-^</code> to go back to the markdown file</li>
<li><code>:EV</code> to edit in the vertical split window, <code>CTRL-W l</code> to go back to the markdown file</li>
<li><code>:ES</code> to edit in the horizontal split window, <code>CTRL-W j</code> to go back to the markdown file</li>
<li><code>:ET</code> to edit in a new tab.</li>
</ul>


<p>All the commands accept the <code>bang</code>.</p>

<h2>Self-Promotion</h2>

<ul>
<li>Star the repository on <a href="https://github.com/amiorin/vim-fenced-code-blocks">GitHub</a></li>
<li>Follow <a href="http://albertomiorin.com">amiorin</a> on

<ul>
<li><a href="http://twitter.com/amiorin">Twitter</a></li>
<li><a href="https://github.com/amiorin">GitHub</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Zen of Wiki with Gollum]]></title>
    <link href="http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum/"/>
    <updated>2013-03-25T13:47:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/03/25/the-zen-of-wiki-with-gollum</id>
    <content type="html"><![CDATA[<p>I've always loved wikis. They are very useful for bookmarks and snippets.
After many years of <a href="https://www.dokuwiki.org/dokuwiki">Dokuwiki</a>, I switched to <a href="https://github.com/gollum/gollum">Gollum</a> for these
reasons:</p>

<ul>
<li>I can use Vim to edit my wiki pages.</li>
<li>I can use Ack for searching.</li>
<li>I can read/edit it on Github, when I'm not on my MacBook.</li>
</ul>


<h2>Setup</h2>

<p>Create a repository in Github (I use the repository of my blog). Click <code>wiki</code>
→ <code>Git Access</code>.  Clone the wiki and you are done.</p>

<h2>Edit</h2>

<p>If you want to edit your wiki in Chrome with Gollum, read this <a href="http://www.nomachetejuggling.com/2012/05/15/personal-wiki-using-github-and-gollum-on-os-x/">article</a>. If
you prefer to use Vim, I suggest you to install these plugins with <a href="https://github.com/gmarik/vundle">Vundle</a>:</p>

<p><code>vim
" open links in chrome
Bundle 'tyru/open-browser.vim'
" syntax highlight
Bundle 'tpope/vim-markdown'
" follow internal links of the wiki
Bundle 'mmai/wikilink'
</code></p>

<h2>Reloadlive</h2>

<p>If you want to see the wiki page rendered in your browser while you are
writing it, I have written a gem called <a href="https://github.com/amiorin/reloadlive">Reloadlive</a>.</p>

<p>```bash
$ gem install reloadlive</p>

<h1>inside the directory of gollum</h1>

<p>$ reloadlive
```</p>

<p><img src="https://raw.github.com/amiorin/reloadlive/master/demo.gif" alt="Reloadlive demo" /></p>

<h2>Sync</h2>

<p>It's very boring to do every time you modify your wiki:</p>

<p><code>sh
git pull
git add -A
git commit -m "minor changes"
git push
</code></p>

<p>But if you use <a href="https://rvm.io/">Rvm</a>, you can create a <code>.rvmrc</code> in the root of your wiki:</p>

<p>```sh</p>

<h1>.rvmrc</h1>

<p>if [[ $- == <em>i</em> ]] # check for interactive shells
then git pull &amp;&amp; git add -A &amp;&amp; git commit -m "minor changes" &amp;&amp; git push
fi
```</p>

<p>Every time you cd, Rvm looks for a file called .rvmrc. If it finds it, it
executes it. If you don't use Rvm, you can use <a href="https://github.com/kennethreitz/autoenv">Autoenv</a>.</p>

<p>```sh</p>

<h1>alias to sync when you are already in the root of the wiki.</h1>

<p>alias gsync="sh ./.rvmrc"
```</p>

<h2>Conclusion</h2>

<ul>
<li>No database.</li>
<li>Password protected if you need.</li>
<li>Distribuited.</li>
<li>Autosync.</li>
<li>It works offline.</li>
<li>Vim editing instead of the <code>textarea</code>.</li>
<li>Regex search with Ack.</li>
<li>Instant preview in the browser.</li>
<li>Markdown language like in <a href="http://jekyllrb.com">Jekyll</a>.</li>
</ul>


<p>I'm ok for the next 10 years. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab Pages in Vim]]></title>
    <link href="http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim/"/>
    <updated>2013-02-20T20:27:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2013/02/20/tab-pages-in-vim</id>
    <content type="html"><![CDATA[<p>This tip works only with MacVim (or GVim).</p>

<p>In Vim you can use one tab page per file, like in other editors, but I
think it doesn't work very well. I prefer to use one tab page for every
project. I used to use a MacVim window for project, but the copy and paste was
a nightmare.</p>

<p><img src="/images/dotfiles.png" width="250">
<img src="/images/octopress.png" width="250">
<img src="/images/gollum.png" width="250"></p>

<p>The rule is simple. Every <strong>tab page</strong> is a <strong>project</strong> and it has a <strong>[local] working
directory</strong> that is displayed in the <code>guitablabel</code>.</p>

<h2>The code</h2>

<p><code>vim
" IMPORTANT! Inside your .gvimrc
augroup cwd
  au!
  au CursorMoved,WinEnter * call settabvar(tabpagenr(),'cwd', substitute(getcwd(), $HOME, '~', ''))
augroup END
set guitablabel=%{gettabvar(v:lnum,'cwd')}
set showtabline=1
</code></p>

<h2>Event DirEnter and DirLeave</h2>

<p>I would like to see in the next versions of Vim these two events. They would
be very useful to write new plugins <em>project-oriented</em>. In the meanwhile I've
downloaded the source code of Vim. After ten years, maybe I'll try again to
write some C code again.</p>

<p>For more info <code>:h autocommand-events</code> and <code>:h tabpages</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoread and autowrite in Vim]]></title>
    <link href="http://albertomiorin.com/blog/2012/12/10/autoread-and-autowrite-in-vim/"/>
    <updated>2012-12-10T15:24:00+01:00</updated>
    <id>http://albertomiorin.com/blog/2012/12/10/autoread-and-autowrite-in-vim</id>
    <content type="html"><![CDATA[<h2>What</h2>

<p>Don't save or reload your buffers. Vim can do that for you.</p>

<h2>How</h2>

<p>From my <a href="https://github.com/amiorin/dotfiles/blob/master/vimrc">.vimrc</a>
```vim
" autoread and autowrite
augroup save
  au!
  au FocusLost * wall
augroup END
set nohidden
set nobackup
set noswapfile
set nowritebackup
set autoread
set autowrite
set autowriteall</p>

<p>" persistent-undo
set undodir=~/.vim/undo
set undofile
```</p>

<h2>Why</h2>

<p><code>:w&lt;CR&gt;</code> and <code>&lt;D-s&gt;</code> take too much time. We should not be worried of data
loss, because we have Git and <code>:h persistent-undo</code>.</p>

<p>Additionaly how many times it's happened to waste time in Chrome, reloading
the page n-times, because we had forgot to save in Vim?</p>

<p>Using <code>nohidden</code>, <code>autowrite</code> and <code>update</code> we are sure that everything
is saved.</p>

<p>```sh</p>

<h1>don't forget to create the directory for the undo files</h1>

<p>mkdir ~/.vim/undo
```</p>

<h2>You don't need the scratch plugin</h2>

<p>You would like to try a VimL snippet, create a <code>scratch.vim</code> somewhere. Use
a global mark <code>mS</code> (S is scratch).</p>

<p>Now with <code>'S</code> you are in your scratch buffer.</p>

<p>Use <a href="https://github.com/amiorin/vim-eval">vim-eval</a> to evaluate (<code>&lt;C-c</code>) the file, the region or the line.</p>

<h2>Other global marks that I use</h2>

<ul>
<li><code>'V</code> my .vimrc</li>
<li><code>'T</code> my todos</li>
<li><code>'0</code> last file edited</li>
</ul>


<h2>But the undo is not user-friendly</h2>

<p>Yes, you're right, try Losh's <a href="https://github.com/sjl/gundo.vim">gundo</a></p>

<p><code>vim
Bundle 'sjl/gundo.vim'
</code></p>

<p>The command is <code>GundoToggle</code>.</p>
]]></content>
  </entry>
  
</feed>
